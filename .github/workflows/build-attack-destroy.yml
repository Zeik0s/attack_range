name: build-attack-destroy
on:
  push:
  pull_request:
  schedule:
    - cron: '15 13 * * *'

env:
  IMAGE_NAME: "splunk/attack_range"
jobs:

  #This will prevent anything below from running if we're not
  #on a tag, but for good measure and verbosity we will 
  #still check that each of these steps only runs against
  #a tag.
  validate-tag-if-present:
    runs-on: ubuntu-latest

    steps:
      - name: TAGGED, Validate that the tag is in the correct format

        run: |
          echo "The GITHUB_REF: $GITHUB_REF"
          #First check to see if the release is a tag
          if [[ $GITHUB_REF =~ refs/tags/* ]]; then
            #Yes, this is a tag, so we need to test to make sure that the tag
            #is in the correct format (like v1.10.20)
            if [[ $GITHUB_REF =~ refs/tags/v[0-9]+.[0-9]+.[0-9]+ ]]; then
              echo "PASS: Tagged release with good format"
              exit 0
            else
              echo "FAIL: Tagged release with bad format"
              exit 1
            fi
          else
          echo "PASS: Not a tagged release"
          exit 0
          fi    

  terraform-build-attack-destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Print env
        run: |
          echo "Event that triggered this action: $GITHUB_EVENT_NAME"
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: 'develop'

      - name: Install System Packages
        run: |
          sudo apt update -qq        
          #The following installation is required for the ssh-key-action to work
          sudo apt install -y openssh-client
      
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9' #Available versions here - https://github.com/actions/python-versions/releases  easy to change/make a matrix/use pypy
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - name: Install Python dependencies
        run: |
          #Get the virtualenv set up
          rm -rf venv
          python3 -m venv --clear venv
          source venv/bin/activate
          python3 -m pip install -r requirements.txt
      - name: Verify attack_range.py executes
        run: | 
          source venv/bin/activate
          cp attack_range.conf.template attack_range.conf
          sed -i "s/attack_range_password = .*$/attack_range_password = Pl3ase-k1Ll-me:p123/g" attack_range.conf
          python3 attack_range.py --version
      
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2 #assume we will always use this, could make this an environment variable...

      #This is probably what we should use, along with a secret that contains 
      #our SSH key.  I think in the CircleCI portion, a the add_ssh_keys along with
      #the fingerprint is used to fetch an SSH key that has been uploaded as a secret
      #https://github.com/shimataro/ssh-key-action
      # We don't have an ssh key or known hosts set yet, so of course this will fail
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: attack-range-ci-job-github-actions
          known_hosts: unnecessary
          if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)

      - uses: hashicorp/setup-terraform@v1
        # with:
        #   #Do we just want to leave this blank so we use the latest?
        #   #Right now, we include the version that was in the original test file
        #   terraform_version: 1.0.2

      - name: Test Terraform Build, Attack, Destroy
        run: |
          source venv/bin/activate
          cp attack_range.conf.template attack_range.conf
          sed -i "s/attack_range_password = .*$/attack_range_password = Pl3ase-k1Ll-me:p123/g" attack_range.conf
          #change attack_range default ssh keys
          sed -i "s/key_name = .*$/key_name = attack-range-ci-job-github-actions/g" attack_range.conf
          sed -i "s/region = us-west-2/region = us-east-2/g" attack_range.conf
          sed -i "s/private_key_path =.*$/private_key_path = ~\/.ssh\/attack-range-ci-job-github-actions/g" attack_range.conf
          sed -i "s/windows_domain_controller = .*$/windows_domain_controller = 1/g" attack_range.conf
          cd terraform/aws/local/
          terraform init
          cd ../../..
          python3 attack_range.py build
          python3 attack_range.py simulate --target ar-win-dc-default-attack-range-ci-job --simulation_technique T1003.002
          python3 attack_range.py destroy
        
      
      - name: Cleanup terraform on failures
        if: failure()
        run: |
          source venv/bin/activate
          python3 attack_range.py destroy
        
  publish-github-release:
    runs-on: ubuntu-latest
    needs: [validate-tag-if-present, terraform-build-attack-destroy]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
        - name: Checkout repo
          uses: actions/checkout@v2
          with:
            ref: 'develop'

        #Rename the build artifacts artifacts appropriately
        - name: Set tag
          id: vars
          run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

        - name: Prepare Release for Publishing on github
          run: |
            cd ..
            tar -zcvf attack-range-${{ steps.vars.outputs.tag }}.tar.gz attack_range
            sha256sum attack-range-${{ steps.vars.outputs.tag }}.tar.gz > checksum-${{ steps.vars.outputs.tag }}.txt
        #Upload all of the release artifacts that we have created using the third party
        #action recommended bu Github
        - name: Upload Release Artifacts
          uses: softprops/action-gh-release@v1
          with:
            files: |
              ../attack-range-${{ steps.vars.outputs.tag }}.tar.gz
              ../checksum-%{{ steps.vars.outputs.tag }}.txt
  
  #We can trivially combine these next two steps.  In the original
  #test, these were two different steps - 
  #build-docker-image and publish-docker-image
  build-and-publish-docker-image:
    runs-on: ubuntu-latest
    needs: [validate-tag-if-present, terraform-build-attack-destroy, publish-github-release]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: 'develop'

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Setup Docker Build and Push
        uses: docker/build-push-action@v2
        with:
          push: true 
          context: docker/ #do the build in the docker directory, not current working directory
          tags: ${{ env.IMAGE_NAME }}:latest